package com.example.study_kotlin2.ChapterMemo;

/*
Chapter 12
프래그먼트 간의 이동

1. 프래그먼트 인자(Fragment argument)를 사용하여 프래그먼트 인스턴스에게 데이터를 전달하는 방법
2. UI 변경에 따라 LiveData를 변환하는 방법

단일 액티비티 : 프래그먼트의 우두머리
- 액티비티형 아키텍쳐 : 한 액티비티가 다른 액티비티를 시작시킨다.
- 단일 액티비티 아키텍쳐 : 하나의 액티비티와 다수의 프래그먼트를 가진다.
-> 프래그먼트에서 프래그먼트로 이동시키지 않는 이유 : 프래그먼트의 기본 취지에 어울리지 않는다., 프래그먼트는 독립성을 유지해야 한다. 따라서 콜백 인터페이스를 정의하고 프래그먼트를 교체해야한다.

프래그먼트 콜백 인터페이스
- 프래그먼트 교체 기능을 호스팅 액티비티에 위임하기 위해 프래그먼트에는 Callback이라는 이름의 커스텀 콜백 인터페이스를 정의하고,
이 인터페이스에는 프래그먼트가 필요로 하는 일을 수행하게 하는 함수를 정의한다.

참고 생명주기 함수
- onAttach(Context) 생명주기 함수는 프래그먼트가 호스팅 액티비티에 연결될 때 호출된다.
(Activity 타입을 인자로 전달해도 되지만 슈퍼 타입인 context를 전달하는 것이 코드 유연성에 좋다.)
- onDetach() 생명주기 함수는 프래그먼트가 액티비티에서 분리될 때 호출된다.

프래그먼트 인자
이 앱에서 활용 :
리스트의 범죄 데이터가 선택되면 CrimeListFragment에서 호스팅 액티비티의 onCrimeSelected(UUID)를 호출하며, 이 때 해당 범죄 데이터의 ID를 인자로 전달한다.
하지만 호스팅 액티비티의 onCrimeSelected(UUID)에서 CrimeListFragment를 CrimeFragment 인스턴스로 교체할 때 onCrimeFSelected(UUID)의 인자로 전달된
범죄 데이터의 ID를 전달하는 방법이 필요하다.
- 프래그먼트 인자(fragment argument)가 해결책을 제공한다.
- 프래그먼트 인자를 사용하면 프래그먼트에 속하는 인자 번들(argument bundle)에 데이터를 저장할 수 있다.
- 프래그먼트 인자는 프래그먼트의 캡슐화를 도와준다. 캡슐화가 잘된 프래그먼트는 재사용할 수 있는 구성 요소가 되므로 쉽게 호스팅 될 수 있다.
- 프래그먼트 인자를 생성하기 위해 Bundle 객체를 생성하고, Bundle의 put 함수들을 사용해서 인자를 Bundle 객체에 추가한다.
- Bundle은 키와 값의 쌍으로 된 데이터를 포함하며, 각 쌍의 데이터를 인자라고 한다.
- 인자 번들을 프래그먼트에 추가할 때는 setArguments(Bundle)를 호출한다. 단 프래그먼트가 생성되어 해당 프래그먼트가 액티비티에 추가되기 전에 프래그먼트에 첨부해야 한다.





 */